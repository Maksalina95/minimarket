import { Octokit } from "@octokit/rest";

export default async function handler(req, res) {
  if (req.method !== 'POST') {
    return res.status(405).json({ error: '–ú–µ—Ç–æ–¥ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è' });
  }

  const { phone } = req.body;

  if (!phone) {
    return res.status(400).json({ error: '–¢–µ–ª–µ—Ñ–æ–Ω –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' });
  }

  try {
    const octokit = new Octokit({ auth: process.env.GITHUB_TOKEN });
    const { data } = await octokit.repos.getContent({
      owner: 'Maksalina95',
      repo: 'proverka',
      path: 'data.csv',
    });

    const content = Buffer.from(data.content, 'base64').toString();
    const lines = content.trim().split('\n').slice(1); // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫

    const isBlocked = lines.some(line => {
      const parts = line.split(',');
      const linePhone = parts[1]?.trim();
      const blocked = parts[3]?.trim();
      return linePhone === phone && (blocked === 'üîí' || blocked === '‚úÖ');
    });

    res.status(200).json({ blocked: isBlocked });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:", error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
}
