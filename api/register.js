// api/register.js

import { Octokit } from "@octokit/rest";

export default async function handler(req, res) {
  if (req.method !== 'POST') {
    return res.status(405).json({ error: '–ú–µ—Ç–æ–¥ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è' });
  }

  try {
    const { name, phone } = req.body;

    if (!name || !phone) {
      return res.status(400).json({ error: '–ò–º—è –∏ —Ç–µ–ª–µ—Ñ–æ–Ω –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' });
    }

    const date = new Date().toLocaleString('ru-RU', { timeZone: 'Europe/Berlin' });
    const newLine = `${name},${phone},${date}\n`;

    const token = process.env.GITHUB_TOKEN;
    const owner = 'Maksalina95'; // üëà –¢–≤–æ–π GitHub username
    const repo = 'proverka';     // üëà –ù–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
    const path = 'data.csv';     // üëà –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏

    const octokit = new Octokit({ auth: token });

    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ñ–∞–π–ª
    let sha = null;
    let content = '';

    try {
      const response = await octokit.repos.getContent({
        owner,
        repo,
        path,
      });

      sha = response.data.sha;
      content = Buffer.from(response.data.content, 'base64').toString();
    } catch (error) {
      if (error.status === 404) {
        // –§–∞–π–ª –µ—â—ë –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç ‚Äî –Ω–∏—á–µ–≥–æ —Å—Ç—Ä–∞—à–Ω–æ–≥–æ
        sha = null;
        content = '';
      } else {
        throw error;
      }
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É
    const updatedContent = content + newLine;

    await octokit.repos.createOrUpdateFileContents({
      owner,
      repo,
      path,
      message: '–î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
      content: Buffer.from(updatedContent).toString('base64'),
      sha: sha || undefined,
    });

    res.status(200).json({ success: true });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
}
